<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Track Bus - Bus Tracking System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <link href="/css/responsive-maps.css" rel="stylesheet">
    <link href="/css/mobile-layout-fix.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="/js/geocoding-service.js"></script>
    <script src="/js/mobile-maps-fix.js"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-info">
        <div class="container-fluid">
            <a class="navbar-brand" href="/public/dashboard"><i class="fas fa-map-marked-alt me-2"></i>Bus Tracker</a>
            <div class="navbar-nav me-auto">
                <a class="nav-link" href="/public/dashboard">Dashboard</a>
                <a class="nav-link" href="/public/search">Search Buses</a>
                <a class="nav-link active" href="#">Track Bus</a>
            </div>
            <div class="d-flex">
                <form action="/auth/logout" method="post">
                    <button class="btn btn-outline-light" type="submit">Logout</button>
                </form>
            </div>
        </div>
    </nav>

    <div class="container-fluid my-3">
        <!-- Bus Information Card -->
        <div class="row mb-3">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-info text-white">
                        <div class="row align-items-center">
                            <div class="col-md-8">
                                <h4><i class="fas fa-bus me-2"></i>Bus <%= journey.busNumber %></h4>
                                <p class="mb-0"><strong><%= journey.startingPoint %></strong> â†’ <strong><%= journey.destination %></strong></p>
                            </div>
                            <div class="col-md-4 text-end">
                                <span class="badge <%= journey.status === 'running' ? 'bg-success' : journey.status === 'starting' ? 'bg-warning' : 'bg-secondary' %> fs-6">
                                    <%= journey.status.toUpperCase() %>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <strong>Route:</strong><br>
                                <span class="text-muted"><%= journey.route %></span>
                            </div>
                            <div class="col-md-3">
                                <strong>Highway:</strong><br>
                                <span class="text-muted"><%= journey.highway || 'N/A' %></span>
                            </div>
                            <div class="col-md-3">
                                <strong>Depot:</strong><br>
                                <span class="text-muted"><%= journey.depot || 'N/A' %></span>
                            </div>
                            <div class="col-md-3">
                                <strong>Last Update:</strong><br>
                                <span class="text-muted" id="lastUpdate">Just now</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Map Section -->
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5><i class="fas fa-map me-2"></i>Live Location</h5>
                        <div>
                            <span class="badge bg-success" id="connectionStatus">Connected</span>
                            <button class="btn btn-sm btn-outline-primary" onclick="centerMap()">
                                <i class="fas fa-crosshairs"></i> Center
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div id="map" style="height: 500px;"></div>
                    </div>
                </div>
            </div>

            <!-- Info Panel -->
            <div class="col-lg-4">
                <!-- Location Details -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h6><i class="fas fa-map-marker-alt me-2"></i>Current Location</h6>
                    </div>
                    <div class="card-body">
                        <div id="locationDetails">
                            <% if (journey.currentLocation && journey.currentLocation.coordinates) { %>
                                <% const [lng, lat] = journey.currentLocation.coordinates; %>
                                <p class="mb-2">
                                    <strong>Latitude:</strong> <%= lat.toFixed(6) %><br>
                                    <strong>Longitude:</strong> <%= lng.toFixed(6) %>
                                </p>
                                <small class="text-success">
                                    <i class="fas fa-circle text-success me-1"></i>Live tracking active
                                </small>
                            <% } else { %>
                                <p class="text-muted">Location data not available</p>
                            <% } %>
                        </div>
                    </div>
                </div>

                <!-- Route Progress -->
                <div class="card mb-3">
                    <div class="card-header">
                        <h6><i class="fas fa-route me-2"></i>Journey Progress</h6>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3">
                            <div class="progress-bar bg-info" role="progressbar" style="width: <%= journey.status === 'running' ? '50' : journey.status === 'completed' ? '100' : '10' %>%">
                                <%= journey.status === 'running' ? 'In Transit' : journey.status === 'completed' ? 'Completed' : 'Starting' %>
                            </div>
                        </div>
                        <div class="d-flex justify-content-between text-small">
                            <span><i class="fas fa-play text-success"></i> Start</span>
                            <span><i class="fas fa-flag text-danger"></i> Destination</span>
                        </div>
                    </div>
                </div>

                <!-- Quick Actions -->
                <div class="card">
                    <div class="card-header">
                        <h6><i class="fas fa-bolt me-2"></i>Quick Actions</h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary" onclick="refreshLocation()">
                                <i class="fas fa-sync-alt me-2"></i>Refresh Location
                            </button>
                            <button class="btn btn-outline-info" onclick="shareLocation()">
                                <i class="fas fa-share me-2"></i>Share Tracking
                            </button>
                            <a href="/public/search" class="btn btn-outline-success">
                                <i class="fas fa-search me-2"></i>Search Other Buses
                            </a>
                            <a href="/public/dashboard" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Back to Dashboard
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Share Modal -->
    <div class="modal fade" id="shareModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Share Bus Tracking</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p>Share this tracking link with others:</p>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" id="shareUrl" readonly>
                        <button class="btn btn-outline-primary" onclick="copyToClipboard()">
                            <i class="fas fa-copy"></i> Copy
                        </button>
                    </div>
                    <small class="text-muted">
                        Others can use this link to track the same bus without logging in.
                    </small>
                </div>
            </div>
        </div>
    </div>

    <script>
        let map;
        let busMarker;
        let socket;
        const journeyId = '<%= journey._id %>';
        let lastUpdateTime = Date.now();

        // Initialize map with route plotting
        let routePolyline = null;
        let startMarker = null;
        let endMarker = null;
        const geocodingService = new GeocodingService();
        
        async function initMap() {
            <% if (journey.currentLocation && journey.currentLocation.coordinates) { %>
                <% const [lng, lat] = journey.currentLocation.coordinates; %>
                map = L.map('map').setView([<%= lat %>, <%= lng %>], 13);
            <% } else { %>
                map = L.map('map').setView([20.5937, 78.9629], 5);
            <% } %>

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: 'Â© OpenStreetMap contributors'
            }).addTo(map);

            // Plot the route first
            await plotJourneyRoute();

            // Create custom bus icon
            const busIcon = L.divIcon({
                className: 'custom-bus-icon',
                html: '<i class="fas fa-bus" style="color: #007bff; font-size: 24px;"></i>',
                iconSize: [30, 30],
                iconAnchor: [15, 15]
            });

            <% if (journey.currentLocation && journey.currentLocation.coordinates) { %>
                <% const [lng, lat] = journey.currentLocation.coordinates; %>
                busMarker = L.marker([<%= lat %>, <%= lng %>], {icon: busIcon}).addTo(map);
                busMarker.bindPopup(`
                    <div class="text-center">
                        <strong>Bus <%= journey.busNumber %></strong><br>
                        <small><%= journey.startingPoint %> â†’ <%= journey.destination %></small><br>
                        <span class="badge bg-<%= journey.status === 'running' ? 'success' : 'warning' %>"><%= journey.status %></span>
                    </div>
                `).openPopup();
                
                // Ensure bus is visible on the route
                map.setView([<%= lat %>, <%= lng %>], 13);
            <% } else if (routePolyline) { %>
                // If no bus location but we have a route, fit to route bounds
                map.fitBounds(routePolyline.getBounds(), { padding: [20, 20] });
            <% } %>
        }
        
        // Plot journey route using geocoding
        async function plotJourneyRoute() {
            try {
                console.log('Plotting route: <%= journey.startingPoint %> â†’ <%= journey.destination %>');
                
                const startCoords = await geocodingService.getCoordinates('<%= journey.startingPoint %>');
                const endCoords = await geocodingService.getCoordinates('<%= journey.destination %>');
                
                if (startCoords && endCoords) {
                    console.log('Got coordinates:', startCoords, endCoords);
                    
                    // Plot route using OSRM or fallback to straight line
                    await drawRoute(startCoords, endCoords);
                    
                    // Add start and end markers
                    addRouteMarkers(startCoords, endCoords);
                } else {
                    console.warn('Could not geocode route endpoints');
                    showRouteError('Unable to plot route on map');
                }
            } catch (error) {
                console.error('Error plotting journey route:', error);
                showRouteError('Error loading route information');
            }
        }
        
        // Draw route using OSRM API
        async function drawRoute(startCoords, endCoords) {
            try {
                const routeUrl = `https://router.project-osrm.org/route/v1/driving/${startCoords.lng},${startCoords.lat};${endCoords.lng},${endCoords.lat}?overview=full&geometries=geojson`;
                
                const response = await fetch(routeUrl);
                const data = await response.json();
                
                if (data.routes && data.routes.length > 0) {
                    const route = data.routes[0];
                    const coordinates = route.geometry.coordinates.map(coord => [coord[1], coord[0]]);
                    
                    // Create route polyline
                    routePolyline = L.polyline(coordinates, {
                        color: '#007bff',
                        weight: 5,
                        opacity: 0.8
                    }).addTo(map);
                    
                    // Add route info popup
                    const distance = (route.distance / 1000).toFixed(1);
                    const duration = Math.round(route.duration / 60);
                    
                    routePolyline.bindPopup(`
                        <div style="text-align: center;">
                            <h6 class="mb-2"><%= journey.startingPoint %> â†’ <%= journey.destination %></h6>
                            <p class="mb-1"><strong>Distance:</strong> ${distance} km</p>
                            <p class="mb-1"><strong>Duration:</strong> ${duration} minutes</p>
                            <small class="text-muted">Route provided by OpenStreetMap</small>
                        </div>
                    `);
                    
                    console.log('Route plotted successfully');
                } else {
                    throw new Error('No route found');
                }
            } catch (error) {
                console.warn('OSRM routing failed, using straight line:', error);
                
                // Fallback to straight line
                routePolyline = L.polyline([
                    [startCoords.lat, startCoords.lng],
                    [endCoords.lat, endCoords.lng]
                ], {
                    color: '#6c757d',
                    weight: 4,
                    opacity: 0.6,
                    dashArray: '10, 10'
                }).addTo(map);
                
                routePolyline.bindPopup(`
                    <div style="text-align: center;">
                        <h6 class="mb-2"><%= journey.startingPoint %> â†’ <%= journey.destination %></h6>
                        <p class="mb-1"><small>Direct route (approximate)</small></p>
                    </div>
                `);
                
                console.log('Fallback straight line route plotted');
            }
        }
        
        // Add route start and end markers
        function addRouteMarkers(startCoords, endCoords) {
            // Start marker
            const startIcon = L.divIcon({
                html: '<i class="fas fa-play" style="color: white; font-size: 12px;"></i>',
                className: 'route-marker start-marker',
                iconSize: [20, 20],
                iconAnchor: [10, 10]
            });
            
            startMarker = L.marker([startCoords.lat, startCoords.lng], { icon: startIcon })
                .addTo(map)
                .bindPopup(`<strong>Start:</strong> <%= journey.startingPoint %>`);
            
            // End marker
            const endIcon = L.divIcon({
                html: '<i class="fas fa-flag-checkered" style="color: white; font-size: 12px;"></i>',
                className: 'route-marker end-marker',
                iconSize: [20, 20],
                iconAnchor: [10, 10]
            });
            
            endMarker = L.marker([endCoords.lat, endCoords.lng], { icon: endIcon })
                .addTo(map)
                .bindPopup(`<strong>Destination:</strong> <%= journey.destination %>`);
        }
        
        // Show route error
        function showRouteError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'route-error';
            errorDiv.style.cssText = 'position: absolute; top: 10px; left: 10px; right: 10px; z-index: 1000;';
            errorDiv.innerHTML = `
                <div class="alert alert-warning alert-sm">
                    <i class="fas fa-exclamation-triangle me-2"></i>${message}
                </div>
            `;
            map.getContainer().appendChild(errorDiv);
            
            // Remove after 5 seconds
            setTimeout(() => {
                if (errorDiv.parentNode) {
                    errorDiv.parentNode.removeChild(errorDiv);
                }
            }, 5000);
        }

        // Initialize Socket.IO
        function initSocket() {
            socket = io();
            
            // Join specific journey room
            socket.emit('joinRoom', `journey_${journeyId}`);
            console.log('Joined journey room:', `journey_${journeyId}`);
            
            // Listen for location updates
            socket.on('busLocationUpdate', (data) => {
                console.log('Bus location update received:', data);
                if (data.location && data.location.lat && data.location.lng) {
                    updateBusLocation(data.location.lat, data.location.lng);
                    updateLastUpdateTime();
                }
            });
            
            // Also listen for general location updates
            socket.on('locationUpdate', (data) => {
                console.log('General location update received:', data);
                if (data.journeyId === journeyId && data.location && data.location.lat && data.location.lng) {
                    updateBusLocation(data.location.lat, data.location.lng);
                    updateLastUpdateTime();
                }
            });

            // Connection status
            socket.on('connect', () => {
                document.getElementById('connectionStatus').textContent = 'Connected';
                document.getElementById('connectionStatus').className = 'badge bg-success';
            });

            socket.on('disconnect', () => {
                document.getElementById('connectionStatus').textContent = 'Disconnected';
                document.getElementById('connectionStatus').className = 'badge bg-danger';
            });
        }

        // Update bus location on map with enhanced route interaction
        function updateBusLocation(lat, lng) {
            // Validate coordinates
            if (!lat || !lng || isNaN(lat) || isNaN(lng) || lat === 0 || lng === 0) {
                console.warn('Invalid GPS coordinates:', lat, lng);
                return;
            }
            
            // Create or update bus marker
            const busIcon = L.divIcon({
                className: 'custom-bus-icon live-bus',
                html: '<i class="fas fa-bus" style="color: #007bff; font-size: 24px;"></i>',
                iconSize: [30, 30],
                iconAnchor: [15, 15]
            });
            
            if (busMarker) {
                busMarker.setLatLng([lat, lng]);
            } else {
                busMarker = L.marker([lat, lng], {icon: busIcon}).addTo(map);
            }
            
            // Enhanced popup with live status
            busMarker.bindPopup(`
                <div class="text-center">
                    <h6 class="mb-2">ðŸšŒ Bus <%= journey.busNumber %></h6>
                    <p class="mb-2"><small><%= journey.startingPoint %> â†’ <%= journey.destination %></small></p>
                    <span class="badge bg-success">Live GPS</span>
                    <p class="mb-1 mt-2"><small>Coordinates: ${lat.toFixed(6)}, ${lng.toFixed(6)}</small></p>
                    <small class="text-muted">Updated: ${new Date().toLocaleTimeString()}</small>
                </div>
            `);
            
            // Highlight route if available
            if (routePolyline) {
                // Temporarily highlight the route
                routePolyline.setStyle({ 
                    color: '#28a745', 
                    weight: 6, 
                    opacity: 0.9 
                });
                
                // Reset route color after 2 seconds
                setTimeout(() => {
                    if (routePolyline) {
                        routePolyline.setStyle({ 
                            color: '#007bff', 
                            weight: 5, 
                            opacity: 0.8 
                        });
                    }
                }, 2000);
            }
            
            // Smart centering - don't center if user is actively interacting
            if (!map._userInteraction) {
                map.setView([lat, lng], Math.max(map.getZoom(), 13));
            }
            
            // Track user interaction to avoid annoying auto-centering
            map._userInteraction = false;
            map.on('drag zoom', () => {
                map._userInteraction = true;
                setTimeout(() => {
                    map._userInteraction = false;
                }, 10000); // Reset after 10 seconds of inactivity
            });

            // Update location details
            document.getElementById('locationDetails').innerHTML = `
                <div class="d-flex align-items-center mb-2">
                    <div class="live-indicator me-2"></div>
                    <strong>Live GPS Active</strong>
                </div>
                <p class="mb-2">
                    <strong>Latitude:</strong> ${lat.toFixed(6)}<br>
                    <strong>Longitude:</strong> ${lng.toFixed(6)}
                </p>
                <small class="text-success">
                    <i class="fas fa-satellite-dish me-1"></i>Real-time location
                </small>
            `;
        }

        // Update last update time
        function updateLastUpdateTime() {
            lastUpdateTime = Date.now();
            document.getElementById('lastUpdate').textContent = 'Just now';
        }

        // Center map on bus
        function centerMap() {
            if (busMarker) {
                map.setView(busMarker.getLatLng(), 13);
                busMarker.openPopup();
            }
        }

        // Refresh location
        function refreshLocation() {
            const refreshBtn = document.querySelector('[onclick="refreshLocation()"]');
            const originalText = refreshBtn.innerHTML;
            refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Refreshing...';
            refreshBtn.disabled = true;
            
            fetch(`/api/bus/${journeyId}/location`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (data.hasValidLocation && data.location) {
                            console.log('Got valid location:', data.location);
                            updateBusLocation(data.location.lat, data.location.lng);
                            updateLastUpdateTime();
                            centerMap();
                        } else {
                            console.warn('Bus has no valid GPS location');
                            document.getElementById('locationDetails').innerHTML = `
                                <div class="alert alert-warning">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    GPS location is not available for this bus.
                                </div>
                            `;
                        }
                    } else {
                        throw new Error(data.error || 'Failed to fetch location');
                    }
                })
                .catch(error => {
                    console.error('Error refreshing location:', error);
                    document.getElementById('locationDetails').innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            Error fetching location: ${error.message}
                        </div>
                    `;
                })
                .finally(() => {
                    refreshBtn.innerHTML = originalText;
                    refreshBtn.disabled = false;
                });
        }

        // Share location
        function shareLocation() {
            const url = window.location.href;
            document.getElementById('shareUrl').value = url;
            new bootstrap.Modal(document.getElementById('shareModal')).show();
        }

        // Copy to clipboard
        function copyToClipboard() {
            const shareUrl = document.getElementById('shareUrl');
            shareUrl.select();
            shareUrl.setSelectionRange(0, 99999);
            document.execCommand('copy');
            
            // Show feedback
            const button = event.target.closest('button');
            const originalText = button.innerHTML;
            button.innerHTML = '<i class="fas fa-check"></i> Copied';
            setTimeout(() => {
                button.innerHTML = originalText;
            }, 2000);
        }

        // Update relative time
        function updateRelativeTime() {
            const now = Date.now();
            const diff = now - lastUpdateTime;
            const seconds = Math.floor(diff / 1000);
            const minutes = Math.floor(seconds / 60);
            
            if (minutes > 0) {
                document.getElementById('lastUpdate').textContent = `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
            } else if (seconds > 10) {
                document.getElementById('lastUpdate').textContent = `${seconds} seconds ago`;
            } else {
                document.getElementById('lastUpdate').textContent = 'Just now';
            }
        }

        // Initialize everything
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                console.log('Initializing public track page...');
                
                // Initialize map with route plotting
                await initMap();
                
                // Initialize socket connection
                initSocket();
                
                // Update relative time every 30 seconds
                setInterval(updateRelativeTime, 30000);
                
                console.log('Public track page initialized successfully');
            } catch (error) {
                console.error('Error initializing track page:', error);
                showRouteError('Failed to initialize tracking interface');
            }
        });
    </script>

    <style>
        .custom-bus-icon {
            background: transparent;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .live-bus {
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        .route-marker {
            background: transparent;
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .start-marker {
            background-color: #28a745 !important;
            border: 2px solid white !important;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .end-marker {
            background-color: #dc3545 !important;
            border: 2px solid white !important;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .live-indicator {
            width: 10px;
            height: 10px;
            background-color: #28a745;
            border-radius: 50%;
            animation: blink 1.5s infinite;
        }
        
        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.3; }
        }
        
        .alert-sm {
            padding: 8px 12px;
            font-size: 0.875rem;
        }

        #connectionStatus {
            font-size: 0.75rem;
        }

        .progress {
            height: 20px;
        }

        .text-small {
            font-size: 0.875rem;
        }
        
        .route-error {
            pointer-events: none;
        }
        
        .route-error .alert {
            pointer-events: auto;
        }
    </style>
</body>
</html>
